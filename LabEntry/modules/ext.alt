(
    reduce ((#Bool) => #True | #False),
    (def id = (#a => a)),
    (def or = (#p => match (p) {
        #!(True,_,)=>True,
        #!(False,n,)=>n
    })),
    (def map = (#f => (rec self . #list => match (list) {
        #[] => [],
        #!(head :: tail) => ((f head) :: (self tail))
    }))),
    (def fold = (#f => #z => (rec self . #list => match (list) {
        #![] => z,
        #!(head :: tail) => f (head, self tail,)
    }))),
    (def any = (#!(pred, list,) => (fold or) False (map pred list))),
    (def zip = (rec self. #list =>
        match (list) {
            #[] => [],
            #!([]::_) => [],
            #!(h::t) => (map (#l => l.head) list) :: (self (map (#l => l.tail) list))
        }
    )),
    (def add = (#!(a,b,) => a+b)),
)